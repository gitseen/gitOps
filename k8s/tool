[如何优雅的部署KubeDoor——灵活部署篇-运维小路](https://mp.weixin.qq.com/s/vCFON6fuCt9ZGM508UkbWQ)  

# 通过Velero实现集群备份和恢复
https://www.toutiao.com/article/7201284614336332344


# velero & MinIO 对kubernetes进行备份恢复
https://m.toutiao.com/is/iR43Qh1/
https://www.toutiao.com/c/user/token/MS4wLjABAAAAoDOK1T2YcIKmNbeiykJ5FHotu6fz4EmwaKkmk9EzE5U/?source=tuwen_detail&log_from=719073bd9ce92_1688095163869


# [k8s-pod-ExitCode](https://cloud.tencent.com/document/product/457/43125)


# [kubecolor给你的kubectl输出添加色彩](https://www.toutiao.com/article/7316717174142403091)

# # [Kubectl命令导图](https://www.toutiao.com/w/1784972054525066?wid=1706592349518)  




-------------------------------------------------------------------------
# 15款备受推崇的K8S可视化工具,你都玩过哪些？
```
对于那些热爱探索新技术、寻找简化操作方式的运维工程师来说,如何更好地管理和操作K8S集群？本篇将分享15款备受推崇的K8S可视化工具,让你轻松管理和操作集群中的各种资源。你可能已经玩过其中的一些工具,这将是一个与你分享经验的机会哦！

备受推崇的15款
Kubernetes Dashboard: https://github.com/kubernetes/dashboard
KubeSphere: https://kubesphere.io/
Rancher: https://rancher.com/
Lens: https://k8slens.dev/
Octant: https://octant.dev/
K9s: https://k9scli.io/
Shipyard: https://shipyard-project.io/
Kontena Lens: https://www.kontena.io/lens/
Kubernetic: https://kubernetic.com/
Loodse Kubermatic: https://www.kubermatic.com/
Portainer: https://www.portainer.io/
Kubevious: https://kubevious.io/
Kuboard: https://github.com/eip-work/kuboard-press
Grafana: https://grafana.com/
Weave Scope: https://www.weave.works/oss/scope/
cilikube https://github.com/ciliverse/cilikube



每款工具的简述      https://www.toutiao.com/article/7315309929718841907/?log_from=5c00b5a457a12_1715131100747
K8S Dashboard：
作为K8S官方提供的仪表盘工具,它以简洁而直观的界面展示和管理K8S集群中的各类资源。

KubeSphere：
作为一款开源的K8S平台,KubeSphere为你提供了可视化的控制台和管理界面,助你轻松管理应用程序的部署、监控和日志查看等功能。

Rancher：
作为一个开源的容器管理平台,Rancher支持多个K8S集群的管理,具备强大的应用程序管理、监控和自动化部署等功能。

Lens：
作为一款跨平台的K8S可视化工具,Lens支持Windows、macOS和Linux操作系统,提供直观的界面,帮助你查看和操作K8S集群中的各种资源。

Octant：
作为一款开源的K8S可视化工具,Octant提供了简洁而功能丰富的用户界面,支持自定义插件和扩展,助你更好地查看和管理K8S集群。

K9s：
作为一款基于终端的K8S管理工具,K9s提供了交互式的界面,让你可以轻松查看和操作K8S资源,实时监控、日志查看、资源过滤等功能一应俱全。

Shipyard：
作为一款开源的容器管理平台,Shipyard提供了可视化界面,帮助你管理和监控K8S集群,支持应用程序部署、资源管理和事件触发等功能。

Kontena Lens：
作为一款跨平台的K8S管理工具,Kontena Lens提供了直观的用户界面,让你可以轻松查看和操作K8S集群中的资源,支持多集群管理、监控和日志查看等功能。

Kubernetic：
作为一款面向开发人员和运维人员的K8S可视化工具,Kubernetic提供了强大的功能和直观的用户界面,帮助你更好地管理和操作K8S集群,支持实时监控、事件触发、日志查看等功能。

Loodse Kubermatic：
作为一款开源的K8S管理平台,Loodse Kubermatic提供了可视化界面,帮助你管理多个K8S集群,具备应用程序部署、自动扩展、监控和日志查看等功能。

Portainer：
作为一款开源的容器管理工具,Portainer提供了可视化界面,支持管理Docker和K8S集群,实现应用程序部署、资源监控和日志查看等功能。

Kubevious：
作为一款开源的K8S可视化工具,Kubevious提供了直观的界面,帮助你查看和管理K8S集群中的资源,支持拓扑图展示、配置审计和资源关系分析等功能。

Kuboard：
作为一款开源的K8S可视化仪表板,Kuboard提供了用户友好的界面,帮助你监控和管理K8S集群,支持资源概览、事件查看和日志管理等功能。

Grafana：
虽然主要是一款监控和可视化工具,Grafana也可以与K8S集成,提供对集群的可视化展示。通过Grafana的仪表盘功能,你可以创建和定制自己的K8S集群监控视图。

Weave Scope：
作为一款开源的容器和微服务可视化工具,Weave Scope提供了直观的界面,帮助你查看和管理K8S集群中的资源,支持拓扑图展示、性能监控和流量分析等功能。

Kubeshark:
[https://kubeshark.co/](https://www.toutiao.com/article/7316091613871112767/?log_from=d9ea9609d93e2_1715130666969)
Kubeshark 提供实时的 K8s 协议级别的可见性，可以捕获和监控所有在容器、Pod、节点和集群之间进出和流动的流量和负载。可以把它想象成专门针对 Kubernetes 重新发明的 TCPDump 和 Wireshark 工具。

istio-kiali


最后
这些仅仅是15款备受推崇的K8S可视化工具的一部分,它们都拥有独特的特点和功能,能够满足不同用户的需求。无论你是正在探索K8S的小鲜肉,还是已经熟练运用K8S的老腊肉,这些可视化工具都将成为你提升运维乐趣和效率的利器。那么,你已经尝试过其中的哪些工具呢？评论留言分享你的使用心得,和号主一起共同探索。


```

# [运维工程师有哪些常用的技术网站](https://www.toutiao.com/article/7248549198642250255)  
作为运维工程师,了解并利用常用的技术网站可以极大地提高工作效率和解决问题的能力。本篇整理了一些常用的技术网站,有的可能需要科学上网才能访问。这些网站提供了各种与运维相关的资源、工具和社区支持,包括技术文档、教程、工具、社区讨论等
```
1. Stack Overflow
这是一个广受欢迎的技术问答社区,你可以在这里提问和回答与运维相关的问题。

访问地址：https://stackoverflow.com/
2. DevOps Stack Exchange
这是一个专注于DevOps领域的问答社区,涵盖了与软件开发和运维相关的各种问题。

访问地址：https://devops.stackexchange.com/
3. Reddit
这是一个流行的社交新闻和讨论网站,有一个专门讨论DevOps话题的子版块。

访问地址：https://www.reddit.com/r/devops/
4. InfoQ：
这个网站提供了关于软件开发和IT领域的新闻、文章、演讲录像和技术趋势等资源。

访问地址：https://www.infoq.com/
infoq中国：https://www.infoq.cn/
5. DZone
这是一个开发者社区网站,提供了广泛的技术文章、教程和资源,其中也包括一些与运维相关的内容。 -访问地址：https://dzone.com/

6. GitHub
这是一个代码托管平台,你可以在这里找到开源的运维工具、项目和脚本。

访问地址：https://github.com/
7. Docker Hub
这是一个Docker容器镜像的存储库,你可以在这里搜索、下载和分享各种常用的容器镜像。

访问地址：https://hub.docker.com/
8. Server Fault
这是一个专注于系统管理员和网络管理员的问答网站,你可以在这里找到关于服务器配置、故障排除和网络管理方面的问题和解决方案。

访问地址：https://serverfault.com/
9. Reddit 的 r/sysadmin
这是一个系统管理员的专业社区,你可以在这里与其他运维人员交流经验、提问和获取技术建议。

访问地址：https://www.reddit.com/r/sysadmin/
10. Linux
这是一个关于 Linux 操作系统和开源技术的综合门户网站,你可以在这里找到有关服务器管理和运维方面的教程、新闻和资源。

访问地址：https://www.linux.com/
11. DigitalOcean Community
这是一个由 DigitalOcean 提供的社区平台,提供关于云计算、服务器管理和开发的教程、文档和问答。

访问地址：https://www.digitalocean.com/community
12. LinuxQuestions
这是一个关于 Linux 和开源技术的问答和讨论社区,提供了广泛的主题和技术支持。

访问地址：https://www.linuxquestions.org/
13. Linux Foundation
Linux Foundation是一个致力于推动开源技术发展的非营利组织,在全球范围内都有很高的知名度和影响力,他们提供各种与Linux和开源技术相关的培训和认证课程。

访问地址：https://training.linuxfoundation.cn/
这些网站涵盖了广泛的技术领域,包括运维、开发、云计算、容器化等。它们提供了丰富的资源和社区讨论,可帮助我们解决问题、学习新知识和与其他行业专业人士交流。

点击链接,畅读精彩文章,从中获取洞见,为自己的技术之旅注入新的动力！关注我的微信公众号,不错过更多精彩内容。


```


K8s系统组件（如 kubelet、containerd）预留资源配置参考https://www.toutiao.com/article/7526844470365667882  
```bash
systemReserved:
  cpu: 500m        # 为系统组件预留0.5核CPU
  memory: 1Gi      # 为系统组件预留1GB内存
  ephemeral-storage: 10Gi  # 为临时存储预留10GB磁盘空间
kubeReserved:
  cpu: 100m        # 为K8s组件预留0.1核CPU
  memory: 256Mi    # 为K8s组件预留256MB内存
evictionHard:
  memory.available:  "500Mi"  # 当节点可用内存低于500Mi时，立即驱逐Pod
  nodefs.available:  "10%"    # 当节点根目录可用空间低于10%时，立即驱逐Pod
  imagefs.available: "15%"    # 当容器镜像存储可用空间低于15%时，立即驱逐Pod

kubectl get --raw /api/v1/nodes/$(hostname)/proxy/configz | jq '.kubeletconfig|.systemReserved, .kubeReserved'
journalctl -u kubelet | grep -i "systemReserved"


#通过kubelet配置文件设置预留资源
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
systemReserved:
  cpu: "1"
  memory: "1Gi"
kubeReserved:
  cpu: "500m"
  memory: "500Mi"
systemReservedCgroup: "/system.slice"
kubeReservedCgroup: "/kubelet.service"
enforceNodeAllocatable: ["pods", "system-reserved", "kube-reserved"]

#kubeadm-init设置预留资源
使用kubeadm初始化集群，可以在kubeadm-config.yaml中引用kubelet配置
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
kubernetesVersion: stable
networking:
  podSubnet: "10.244.0.0/16"
nodeRegistration:
  kubeletExtraArgs:
    config: "/var/lib/kubelet/config.yaml"
```



